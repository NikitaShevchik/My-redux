{"version":3,"sources":["node_modules/nanoid/url-alphabet/index.js","node_modules/nanoid/index.browser.js","redux/store.ts","index.ts"],"names":["urlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","length","LN2","step","size","id","j","customAlphabet","nanoid","reduce","byte","toString","toUpperCase"],"mappings":"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","file":"My redux.77de5100.js","sourceRoot":"..","sourcesContent":["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { ITodo } from \"../types/types\";\r\n\r\n\r\n\r\nexport function createStore<T, K>(reducer: (state: T , action: { type: string; payload?: K }) => T, initialState: T) {\r\n    let state = initialState;\r\n    let subscribing: () => void;\r\n    return {\r\n        getState: () => state,\r\n        dispatch(action: {\r\n            type: string;\r\n            payload?:K\r\n        }) {\r\n            state = reducer(state, action);\r\n            subscribing();\r\n            return action;\r\n        },\r\n        subscribe(subscrib: VoidFunction) {\r\n            subscribing = subscrib;\r\n        }\r\n    }\r\n}","import { nanoid as id } from \"./node_modules/nanoid/index\";\r\nimport { createStore } from \"./redux/store\"\r\nimport { IAction, ITodo } from \"./types/types\"\r\n\r\nconst todoState: ITodo[] = [\r\n    {\r\n        text: 'Do homework',\r\n        done: false,\r\n        id: id()\r\n    },\r\n    {\r\n        text: 'Make coffee',\r\n        done: false,\r\n        id: id()\r\n    },\r\n    {\r\n        text: 'Make popop',\r\n        done: false,\r\n        id: id()\r\n    }\r\n]\r\n\r\nenum todoActionTypes {\r\n    ADD_TODO = 'ADD_TODO',\r\n    REMOVE_TODO = 'REMOVE_TODO',\r\n    SET_TODO = 'SET_TODO'\r\n}\r\n\r\nfunction todoReducer(state: ITodo[], action: IAction<ITodo>) {\r\n    switch (action.type) {\r\n        case todoActionTypes.ADD_TODO:\r\n            return [\r\n                ...state,\r\n                {\r\n                    ...action.payload,\r\n                    done: false,\r\n                    id: id(),\r\n                }\r\n            ]\r\n        case todoActionTypes.REMOVE_TODO:\r\n            return state.filter(todo => action.payload?.id !== todo.id)\r\n        case todoActionTypes.SET_TODO:\r\n            return state.map((todo) => (\r\n                todo.id === action.payload?.id\r\n                    ? { ...todo, done: !todo.done }\r\n                    : todo\r\n            ));\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst store = createStore<ITodo[], Partial<ITodo>>(todoReducer, todoState)\r\n\r\nconst todo = document.querySelector<HTMLDivElement>('.todo');\r\n\r\nfunction updateTodo() {\r\n    if (todo) {\r\n        let storage = store.getState();\r\n        todo.innerHTML = '';\r\n        storage.map(item => todo.innerHTML += `<div class=\"todo__element\" ><p id=\"${item.id}\" data-done=\"${item.done}\" class=\"todo__item\">${item.text}</p><i id=\"${item.id}\" class='bx bx-trash'></i></div>`)\r\n        const todosText = document.querySelectorAll('.todo__item');\r\n        for (let element of todosText) {\r\n            element.addEventListener('click', () => {\r\n                store.dispatch({\r\n                    type: todoActionTypes.SET_TODO,\r\n                    payload: {\r\n                        id: element.id\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n    let todoDelete = document.querySelectorAll('.bx-trash') as NodeList;\r\n    for (let element of todoDelete) {\r\n        element.addEventListener('click', () => {\r\n            store.dispatch({\r\n                type: todoActionTypes.REMOVE_TODO,\r\n                payload: {\r\n                    id: element['id']\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\nupdateTodo()\r\nstore.subscribe(updateTodo)\r\n\r\nconst buttonAddTodo = document.querySelector('.add');\r\nbuttonAddTodo?.addEventListener('click', () => {\r\n    let input = document.querySelector('.input') as HTMLInputElement;\r\n    if (input.value) {\r\n        const value = input.value;\r\n        store.dispatch({\r\n            type: todoActionTypes.ADD_TODO,\r\n            payload: {\r\n                text: value\r\n            }\r\n        })\r\n        input.value = \"\";\r\n    }\r\n})\r\n\r\nconst showState = document.querySelector('.state');\r\nshowState?.addEventListener('click', () => {\r\n    const state = store.getState();\r\n    console.log(state)\r\n})\r\n\r\n\r\n"]}