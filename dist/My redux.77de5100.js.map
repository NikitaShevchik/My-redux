{"version":3,"sources":["redux/store.ts","index.ts"],"names":[],"mappings":"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","file":"My redux.77de5100.js","sourceRoot":"..","sourcesContent":["export function createStore<T>(reducer: (state: T, action: { type: string; payload?: Partial<T> }) => T, initialState: T) {\r\n    let state = initialState;\r\n    return {\r\n        getState: () => state,\r\n        dispatch(action: {\r\n            type: string;\r\n            payload?: Partial<T>\r\n        }) {\r\n            state = reducer(state, action);\r\n            return action;\r\n        },\r\n    }\r\n}\r\n","import { createStore } from \"./redux/store\"\r\n\r\ninterface Todo {\r\n    text: string;\r\n    done: boolean;\r\n    id: number;\r\n}\r\nconst todoState: Todo[] = [\r\n    {\r\n        text: 'Do homework',\r\n        done: true,\r\n        id: 0\r\n    },\r\n    {\r\n        text: 'Make coffee',\r\n        done: false,\r\n        id: 1\r\n    },\r\n    {\r\n        text: 'Make popop',\r\n        done: true,\r\n        id: 2\r\n    }\r\n]\r\n\r\nenum todoActionTypes {\r\n    ADD_TODO = 'ADD_TODO',\r\n    REMOVE_TODO = 'REMOVE_TODO',\r\n    SET_TODO = 'SET_TODO'\r\n}\r\n\r\n\r\nfunction todoReducer(state: [], action: { type: string, payload?: any }) {\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            state.push(action.payload);\r\n            return state\r\n        case 'REMOVE_TODO':\r\n            return state = state.filter(todo => action.payload.id !== todo.id)\r\n        case 'SET_TODO'\r\n            state[action.payload].done = !state[action.payload].done;\r\n            return state\r\n        default:\r\n            return action\r\n    }\r\n}\r\n\r\nconst store = createStore(todoReducer, todoState)\r\n\r\n// console.log(todoState)\r\n\r\nconsole.log(store.getState())\r\n\r\n\r\nstore.dispatch({\r\n    type: 'ADD_TODO',\r\n    payload: {\r\n        text: 'Nikita',\r\n        done: false,\r\n        id: 3\r\n    }\r\n})\r\n\r\nconst todo = document.querySelector('.todo');\r\nlet storage = store.getState();\r\nstorage.map(y => todo?.innerHTML += `<p id=\"${y.id}\" data-done=\"${y.done}\">${y.text}</p>`)\r\n\r\n// console.log(todo?.children)\r\nfor (let k of todo?.children) {\r\n    if (k.dataset.done === 'true') {\r\n        k.classList.toggle('_done')\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// console.log(store.getState())\r\n// store.dispatch({\r\n//     type: 'SET_TODO',\r\n//     payload: '0'\r\n// })\r\n\r\n// store.dispatch({\r\n//     type: 'REMOVE_TODO',\r\n//     payload: {\r\n//         text: 'Nikita',\r\n//         done: false,\r\n//         id: 3\r\n//     }\r\n// })\r\n\r\n\r\n\r\n// store.dispatch({\r\n//     type: 'ADD_TODO',\r\n//     payload: {\r\n//         text: 'Aleryt',\r\n//         done: false,\r\n//         id: 3\r\n//     }\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function createStore<T>(reducer: (state: T, action: { type: string; payload?: Partial<T> }) => T, initialState: T) {\r\n//     let state = initialState;\r\n//     return {\r\n//         getState: () => state,\r\n//         dispatch(action: {\r\n//             type: string;\r\n//             payload?: Partial<T>\r\n//         }) {\r\n//             state = reducer(state, action);\r\n//             return action;\r\n//         },\r\n//     }\r\n// }\r\n\r\n// const initialState = 10;\r\n// enum actionsType {\r\n//     ADD_ONE = 'ADD_ONE',\r\n//     MIN_ONE = 'MIN_ONE'\r\n// }\r\n// function reducerStore(state, action) {\r\n//     switch (action.type) {\r\n//         case actionsType.ADD_ONE:\r\n//             return state = state + 1;\r\n//         case actionsType.MIN_ONE:\r\n//             return state = state - 1;\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// const store = createStore(reducerStore, initialState);\r\n\r\n\r\n// console.log(store.getState())\r\n// console.log(store.dispatch({\r\n//     type: 'ADD_ONE'\r\n// }))\r\n// console.log(store.dispatch({\r\n//     type: 'ADD_ONE'\r\n// }))\r\n// console.log(store.dispatch({\r\n//     type: 'ADD_ONE'\r\n// }))\r\n// console.log(store.getState())\r\n\r\n//----------------------------------------------------------------------------------------------------------------------------------\r\n\r\n// type FunctionalComponent<T extends object = object> = (props: T & { children: any }) => any;\r\n\r\n// const component: FunctionalComponent<{ name: string, age: number }> = (\r\n//     {\r\n//         children\r\n//     }\r\n// ) => {\r\n\r\n// }\r\n\r\n\r\n// function createStore<T>(reducer: (state: T, action: { type: string, payload?: Partial<T> }) => T, initialState: T) {\r\n//     let state = initialState;\r\n//     // let subscribing;\r\n//     // function dispatch(action) {\r\n//     //     reducer(state, action);\r\n//     //     return action;\r\n//     // }\r\n//     return {\r\n//         getState: () => state,\r\n//         dispatch(action) {\r\n//             state = reducer(state, action);\r\n//             // subscribing()\r\n//             return action;\r\n//         },\r\n//         // subscribe(subscrib) {\r\n//         //     subscribing = subscrib;\r\n//         // }\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n// function createStore<T>(reducer: (state: T, action: { type: string; payload?: Partial<T> }) => T, initialState: T) {\r\n//     let state = initialState;\r\n//     let subscribing;\r\n//     function dispatch(action: {\r\n//         type: string;\r\n//         payload?: Partial<T>\r\n//     }) {\r\n//         reducer(state, action);\r\n//     }\r\n//     return {\r\n//         getState: () => state,\r\n//         dispatch(action) {\r\n//             state = reducer(state, action);\r\n//             subscribing()\r\n//             return action;\r\n//         },\r\n//         subscribe(subscrib) {\r\n//             subscribing = subscrib;\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// interface Action<T> {\r\n//     type: string;\r\n//     payload?: Partial<T>\r\n// }\r\n\r\n// interface Reducer<T> {\r\n//     state: T;\r\n//     action: Action<T>;\r\n// }\r\n\r\n// interface CreateStoreInterface<T> {\r\n//     reducer: Reducer<T>;\r\n//     initialState: T;\r\n\r\n// }\r\n"]}